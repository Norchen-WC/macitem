var setting = require('../lib')
  , argv = []
  , env = {}

argv.push('--bool-argv=true')
argv.push('--bool-argvtrue')
argv.push('--bool-argvfalse')

env.BOOL_ON = 'on'
env.BOOL_OFF = 'off'
env.BOOL_TRUE = 'true'
env.BOOL_FALSE = 'false'
env.BOOL_YES = 'yes'
env.BOOL_NO = 'no'

argv.push('--int-argv')
argv.push('10')
argv.push('--int-argv2=2.5')

env.INT_ZERO = '0'
env.INT_ONE = '1'
env.INT_MORE = '2.5'

argv.push('--num-argv')
argv.push('12.3')
argv.push('--num-argv2=22')

env.NUM_ZERO = '0'
env.NUM_ONE = '1'
env.NUM_MORE = '1.23'

argv.push('--str-argv')
argv.push('hello')
argv.push('--str-argv2=world')

env.STR_HELLO = 'world'

exports.setUp = function(cb) {
  setting({ argv: argv, env: env, reset: true })
  cb()
}

exports.bool = function(test) {
  var t = 'bool'

  setting(t, 'default1', true, 'bool')
  test.strictEqual(setting.bool.default1, true)
  setting(t, 'default2', true, 'boolean')
  test.strictEqual(setting.bool.default2, true)
  setting(t, 'default3', true, Boolean)
  test.strictEqual(setting.bool.default3, true)

  // on - off
  setting(t, 'on', false, t)
  test.strictEqual(setting.bool.on, true)
  setting(t, 'off', true, t)
  test.strictEqual(setting.bool.off, false)

  // true - false
  setting(t, 'true', false, t)
  test.strictEqual(setting.bool.true, true)
  setting(t, 'false', true, t)
  test.strictEqual(setting.bool.false, false)

  // yes - no
  setting(t, 'yes', false, t)
  test.strictEqual(setting.bool.yes, true)
  setting(t, 'no', true, t)
  test.strictEqual(setting.bool.no, false)

  // argv
  setting(t, 'argv', false, t)
  test.strictEqual(setting.bool.argv, true)
  setting(t, 'argvtrue', false, t)
  test.strictEqual(setting.bool.argvtrue, true)
  setting(t, 'argvfalse', true, t)
  test.strictEqual(setting.bool.argvfalse, false)

  test.done()
}

exports.integer = function(test) {
  var t = 'int'

  setting(t, 'default1', 1, 'int')
  test.strictEqual(setting.int.default1, 1)
  setting(t, 'default2', 2, 'integer')
  test.strictEqual(setting.int.default2, 2)
  setting(t, 'default3', 3, 'integer')
  test.strictEqual(setting.int.default3, 3)

  setting(t, 'zero', 1, t)
  test.strictEqual(setting.int.zero, 0)
  setting(t, 'one', 0, t)
  test.strictEqual(setting.int.one, 1)
  setting(t, 'more', 0, t)
  test.strictEqual(setting.int.more, 2)

  // argv
  setting(t, 'argv', 0, t)
  test.strictEqual(setting.int.argv, 10)
  setting(t, 'argv2', 0, t)
  test.strictEqual(setting.int.argv2, 2)

  test.done()
}

exports.number = function(test) {
  var t = 'num'

  setting(t, 'default1', 1.1, 'num')
  test.strictEqual(setting.num.default1, 1.1)
  setting(t, 'default2', 2.2, 'number')
  test.strictEqual(setting.num.default2, 2.2)
  setting(t, 'default3', 3, Number)
  test.strictEqual(setting.num.default3, 3)

  setting(t, 'zero', 1, t)
  test.strictEqual(setting.num.zero, 0)
  setting(t, 'one', 0, t)
  test.strictEqual(setting.num.one, 1)
  setting(t, 'more', 0, t)
  test.strictEqual(setting.num.more, 1.23)

  // argv
  setting(t, 'argv', 0, t)
  test.strictEqual(setting.num.argv, 12.3)
  setting(t, 'argv2', 0, t)
  test.strictEqual(setting.num.argv2, 22)

  test.done()
}

exports.string = function(test) {
  var t = 'str'

  setting(t, 'default1', 'one', 'str')
  test.strictEqual(setting.str.default1, 'one')
  setting(t, 'default2', 'two', 'string')
  test.strictEqual(setting.str.default2, 'two')
  setting(t, 'default3', 'three', String)
  test.strictEqual(setting.str.default3, 'three')

  setting(t, 'hello', 'ok', t)
  test.strictEqual(setting.str.hello, 'world')

  // argv
  setting(t, 'argv', 'ok', t)
  test.strictEqual(setting.str.argv, 'hello')
  setting(t, 'argv2', 'ok', t)
  test.strictEqual(setting.str.argv2, 'world')

  test.done()
}
